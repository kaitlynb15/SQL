#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#How many orders were placed in January?

SELECT *
FROM BIT_DB.JanSales;

SELECT COUNT(orderID)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

#How many of those orders were for an iPhone?

SELECT COUNT(Product)
FROM BIT_DB.JanSales
WHERE Product = 'iPhone'
AND length(orderID) = 6
AND orderID <> 'Order ID';

#Select the customer account numbers for all the orders that were placed in February.

SELECT *
FROM BIT_DB.FebSales
LIMIT 5;

SELECT DISTINCT acctnum
FROM BIT_DB.customers cust
INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id = FEB.orderid
WHERE length(orderid) = 6
AND orderid <> 'Order ID';

#Which product was the cheapest one sold in January, and what was the price?

SELECT *
FROM BIT_DB.JanSales
LIMIT 5;

SELECT DISTINCT Product,
price
FROM BIT_DB.JanSales
ORDER BY price
LIMIT 1;

#What is the total revenue for each product sold in January?
(Revenue can be calculated using the number of products sold and the price of the products)

SELECT *
FROM BIT_DB.JanSales
LIMIT 5;

SELECT Product, 
ROUND(SUM(Quantity)*price,2) AS total_revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product;

#Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?

SELECT *
FROM BIT_DB.FebSales
LIMIT 5;

SELECT Product,
SUM(Quantity) AS total_quantity,
ROUND(SUM(Quantity)*price,2) AS revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
AND length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product;

#How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?

SELECT *
FROM BIT_DB.FebSales
LIMIT 5;

SELECT *
FROM BIT_DB.customers
LIMIT 5;

SELECT COUNT(DISTINCT cust.acctnum),
ROUND(AVG(quantity*price),2)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderID = cust.order_id
WHERE Feb.Quantity > 2
AND length(orderID) = 6
AND orderID <> 'Order ID';

#List all the products sold in Los Angeles in February, and include how many of each were sold.

SELECT * 
FROM BIT_DB.FebSales
LIMIT 10;

SELECT location,
Product,
SUM(Quantity) AS total_quantity
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY Product;

#Which locations in New York received at least 3 orders in January, and how many orders did they each receive?

SELECT *
FROM BIT_DB.JanSales
LIMIT 10;

SELECT DISTINCT location,
COUNT (orderID) AS number_orders
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
AND length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY location
HAVING number_orders >= 3;

#How many of each type of headphone were sold in February?

SELECT * 
FROM BIT_DB.FebSales
LIMIT 10;

SELECT Product,
SUM(Quantity) AS total_quantity
FROM BIT_DB.FebSales
WHERE Product LIKE '%Headphones%'
AND length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product;

#What was the average amount spent per account in February?

SELECT * 
FROM BIT_DB.FebSales
LIMIT 5;

SELECT *
FROM BIT_DB.customers
LIMIT 5;

SELECT SUM(Quantity*price)/COUNT(customers.acctnum) AS avg_spent
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID = customers.order_id
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

#What was the average quantity of products purchased per account in February? 

SELECT SUM(Quantity)/COUNT(customers.acctnum) AS avg_quantity
FROM BIT_DB.FebSales
LEFT JOIN BIT_DB.customers
ON FebSales.orderID = customers.order_id
WHERE length(orderID) = 6
AND orderID <> 'Order ID';

#Which product brought in the most revenue in January and how much revenue did it bring in total?

SELECT Product, 
ROUND(SUM(Quantity*price),2) AS total_revenue
FROM BIT_DB.JanSales
WHERE length(orderID) = 6
AND orderID <> 'Order ID'
GROUP BY Product
ORDER BY total_revenue DESC
LIMIT 1;
